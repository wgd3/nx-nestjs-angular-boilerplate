import{_ as o,r as a,o as s,c as d,b as e,d as t,e as i,f as n}from"./app-0a474bd9.js";const r={},u=n(`<h1 id="getting-started" tabindex="-1"><a class="header-anchor" href="#getting-started" aria-hidden="true">#</a> Getting Started</h1><ol><li><a href="#initial-set-up">Initial Set Up</a><ul><li><a href="#database">Database</a></li></ul></li><li><a href="#configuration">Configuration</a></li><li><a href="#running">Running the Applications</a></li></ol><h2 id="initial-set-up" tabindex="-1"><a class="header-anchor" href="#initial-set-up" aria-hidden="true">#</a> Initial Set Up</h2><p>Once the repository has been created, you&#39;ll need to install the project&#39;s dependencies:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">yarn</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Environment files will also be needed for later configuration. Please rename the example files so that configuration data will be recognized at run time:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">mv</span> .env.example .env

<span class="token comment"># this is only needed if you plan on using Nx Cloud</span>
$ <span class="token function">mv</span> nx-cloud.env.example nx-cloud.env
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="database" tabindex="-1"><a class="header-anchor" href="#database" aria-hidden="true">#</a> Database</h3><p>This backend requires a database connection for data storage. During development I defaulted to a PostgreSQL database running via Docker, but SQLite can be used as well.</p><p><strong>Docker Instructions</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>The <code>docker-compose.yml</code> file includes the Alpine-based postgres image as well as Adminer with a Web UI for graphically managing your database. The Adminer UI will be available at [http://localhost:8080].</p><p>By default a local directory will be used for data persistence (<code>{projectRoot}/tmp/pgdata</code>). This can be changed or removed in the <code>docker-compose.yml</code> file.</p><p><strong>SQLite Instructions</strong></p><p>No special configuration is required - see <a href="#configuration">Configuration</a> for connection details. If a <code>.sqlite</code> file is not available when the application first runs, it will be created.</p><h2 id="configuration" tabindex="-1"><a class="header-anchor" href="#configuration" aria-hidden="true">#</a> Configuration</h2><p>All configuration (except for Nx Cloud) is handled in the <code>.env</code> file we created earlier. Here is an explanation of the settings currently exposed in that file:</p>`,17),c=e("thead",null,[e("tr",null,[e("th",null,"Variable"),e("th",null,"Purpose"),e("th",null,"Notes")])],-1),h=e("tr",null,[e("td",null,"NODE_ENV"),e("td"),e("td")],-1),_=e("tr",null,[e("td",null,"ENVIRONMENT"),e("td",null,"Used to determine where the application is running (CI pipeline, local, prod, etc)"),e("td")],-1),p=e("tr",null,[e("td",null,"API_VERSION"),e("td",null,"REST API uses versioned routes for easy evolution over time. Setting this will change the version exposed by the API."),e("td")],-1),E=e("tr",null,[e("td",null,"API_PREFIX"),e("td",null,[t("Defaults to "),e("code",null,"/api"),t(", this allows customization of the API endpoints paths (ex: "),e("code",null,"/api/v1/my-endpoint"),t(")")]),e("td")],-1),g=e("tr",null,[e("td",null,"CORS_ORIGINS"),e("td",null,[t("Tells NestJS which origins to trust, defaults to "),e("code",null,"*")]),e("td")],-1),f=e("tr",null,[e("td",null,"ENABLE_SWAGGER"),e("td",null,"Toggles whether Swagger docs UI will be exposed"),e("td")],-1),b=e("tr",null,[e("td",null,"GENERATE_SWAGGER_JSON"),e("td",null,[t("Generates a "),e("code",null,"swagger.json"),t(" file if true")]),e("td")],-1),m=e("tr",null,[e("td",null,"JWT_ACCESS_EXPIRATION_TIME"),e("td",null,[t("Time before an access token expires (ex: "),e("code",null,"3600s"),t(" or "),e("code",null,"2d"),t(")")]),e("td")],-1),A=e("tr",null,[e("td",null,"JWT_ACCESS_EXPIRATION_TIME"),e("td",null,[t("Time before a refresh token expoires (ex: "),e("code",null,"7d"),t(" or "),e("code",null,"1w"),t(")")]),e("td")],-1),S=e("tr",null,[e("td",null,"JWT_ACCESS_SECRET"),e("td",null,"Strong secret used to sign JWTs"),e("td",null,[e("strong",null,"MUST"),t(" be different from the refresh token secret. Can be generated using this following shell command:"),e("br"),e("code",null,`node -e "console.log(require('crypto').randomBytes(256).toString('base64'));"`)])],-1),T=e("tr",null,[e("td",null,"JWT_REFRESH_SECRET"),e("td",null,[t("See "),e("code",null,"JWT_ACCESS_SECRET")]),e("td")],-1),v=e("tr",null,[e("td",null,"SERVER_HOST"),e("td",null,[t("REST API host (ex: "),e("code",null,"localhost"),t(", "),e("code",null,"my-app.com"),t(")")]),e("td")],-1),I=e("tr",null,[e("td",null,"SERVER_PORT"),e("td",null,"Port where REST API is exposed"),e("td")],-1),R=e("tr",null,[e("td",null,"SWAGGER_JSON_FILE"),e("td",null,"Name of the file to be generated, if enabled"),e("td")],-1),L=e("td",null,"DATABASE_TYPE",-1),N=e("td",null,[t("Defaults to "),e("code",null,"sqlite"),t(", but "),e("code",null,"postgres"),t(" can be used as well.")],-1),D={href:"https://github.com/typeorm/typeorm/blob/master/src/data-source/DataSourceOptions.ts",target:"_blank",rel:"noopener noreferrer"},x=e("tr",null,[e("td",null,"DATABASE_HOST"),e("td",null,"Host where database is running"),e("td",null,"Not required for SQLite")],-1),O=e("tr",null,[e("td",null,"DATABASE_PORT"),e("td",null,"Port where database is running"),e("td",null,"Not required for SQLite")],-1),P=e("tr",null,[e("td",null,"DATABASE_USERNAME"),e("td",null,"Database user for connection"),e("td",null,"Not required for SQLite")],-1),y=e("tr",null,[e("td",null,"DATABASE_PASSWORD"),e("td",null,"Database password for connection"),e("td",null,"Not required for SQLite")],-1),C=e("tr",null,[e("td",null,"DATABASE_NAME"),e("td",null,"Name of database to create"),e("td")],-1),w=e("tr",null,[e("td",null,"DATABASE_PATH"),e("td",null,"Path to SQLite file"),e("td",null,"Required for SQLite only")],-1),M=e("tr",null,[e("td",null,"DATABASE_LOGGING_ENABLED"),e("td",null,"Toggle additional, database-specific logging"),e("td")],-1),G=e("tr",null,[e("td",null,"DATABASE_SYNCHRONIZE"),e("td",null,"Automatically sync tables/entities with the application"),e("td",null,"Not supposed to be used for production!")],-1),k=e("tr",null,[e("td",null,"SENTRY_DSN"),e("td",null,"Optional DSN URL for Sentry error reporting"),e("td")],-1),B=e("tr",null,[e("td",null,"SOCIAL_GOOGLE_ENABLED"),e("td",null,"Boolean that toggles Google OAuth integration"),e("td")],-1),U=e("tr",null,[e("td",null,"SOCIAL_GOOGLE_CLIENT_ID"),e("td"),e("td")],-1),W=e("tr",null,[e("td",null,"SOCIAL_GOOGLE_CLIENT_SECRET"),e("td"),e("td")],-1),Q=e("tr",null,[e("td",null,"EMAIL_ENABLED"),e("td",null,"Optional boolean that toggles SMTP transport abilities"),e("td")],-1),H=e("tr",null,[e("td",null,"EMAIL_HOST"),e("td",null,"SMTP Host"),e("td")],-1),q=e("tr",null,[e("td",null,"EMAIL_PORT"),e("td",null,"SMTP port"),e("td")],-1),V=e("tr",null,[e("td",null,"EMAIL_USER"),e("td"),e("td")],-1),J=e("tr",null,[e("td",null,"EMAIL_PASSWORD"),e("td"),e("td")],-1),j=e("tr",null,[e("td",null,"EMAIL_TEMPLATE_DIR"),e("td",null,"Path relative to project root of Handlebars files used for emails"),e("td")],-1),$=e("tr",null,[e("td",null,"EMAIL_PARTIALS_DIR"),e("td",null,"Path relative to project root of Handlebars partials that can be included in templates"),e("td")],-1),F=e("tr",null,[e("td",null,"EMAIL_IGNORE_TLS"),e("td"),e("td")],-1),X=e("tr",null,[e("td",null,"EMAIL_REQUIRE_TLS"),e("td"),e("td")],-1),Y=e("tr",null,[e("td",null,"EMAIL_DEBUG"),e("td"),e("td")],-1),z=e("tr",null,[e("td",null,"EMAIL_DEFAULT_NAME"),e("td",null,"Default sender name for emails"),e("td")],-1),Z=e("tr",null,[e("td",null,"EMAIL_DEFAULT_EMAIL"),e("td",null,"Default sender email for outgoing email"),e("td")],-1),K=e("tr",null,[e("td",null,"EMAIL_SECURE"),e("td"),e("td")],-1),ee=n(`<h2 id="running" tabindex="-1"><a class="header-anchor" href="#running" aria-hidden="true">#</a> Running</h2><p>With your database and configuration in place, you should be able to run one of the following commands:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># to run just the REST API</span>
$ nx serve server

<span class="token comment"># to run both the client and API simutaneously</span>
$ nx run-many <span class="token parameter variable">--target</span><span class="token operator">=</span>serve <span class="token parameter variable">--all</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3);function te(ne,le){const l=a("ExternalLinkIcon");return s(),d("div",null,[u,e("table",null,[c,e("tbody",null,[h,_,p,E,g,f,b,m,A,S,T,v,I,R,e("tr",null,[L,N,e("td",null,[t("PostgreSQL and SQLite are the only databases that have been tested. More infomation on configuring TypeORM can be found in their source code: "),e("a",D,[t("DataSourceOptions.ts"),i(l)])])]),x,O,P,y,C,w,M,G,k,B,U,W,Q,H,q,V,J,j,$,F,X,Y,z,Z,K])]),ee])}const ae=o(r,[["render",te],["__file","GETTING_STARTED.html.vue"]]);export{ae as default};
